public List getAllVehiclesThatMeetRequirementsWithCargo(Cargo cargo){
        entityManager = entityManagerFactory.createEntityManager();

        double MAXW = cargo.getKroviniomase();
        CargoType Type = cargo.getCargoType();

        CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();
        CriteriaQuery<Vehicle> query = criteriaBuilder.createQuery(Vehicle.class);
        Root<Vehicle> root = query.from(Vehicle.class);

        Predicate[] predicates = new Predicate[2];
        predicates[0] = criteriaBuilder.gt(root.get("MaxWeight"), MAXW);
        predicates[1] = criteriaBuilder.equal(root.get("cargoType"), Type);
        query.select(root).where(predicates);



        Query q;
        try {
            q = entityManager.createQuery(query);
            return q.getResultList();
        } catch (NoResultException e) {
            return null;
        }
    }

}
  public void createCargo() {
        //Checks if text fields are empty
        if(Cname.getText().isEmpty() || CType.getSelectionModel().isEmpty() || CWeight.getText().isEmpty())
        {
            FxUtils.alterMessage(Alert.AlertType.ERROR, "Error", "Cargo creation report", "Some fields are empty");
        }
        else {

            Cargo cargo = new Cargo(Cname.getText(), CargoType.valueOf(CType.getSelectionModel().getSelectedItem().toString()),Double.parseDouble(CWeight.getText()));
            List parametered = vehicleHib.getAllVehiclesThatMeetRequirementsWithCargo(cargo);
            if (parametered.isEmpty()) FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Cargo creation report", "This cargo can not be transported by any cars in park!");
            cargoHib.createCargo(cargo);

            FxUtils.alterMessage(Alert.AlertType.INFORMATION, "Successful", "Cargo creation report", "Cargo " + Cname.getText() + " created successfully");
        }

    }
