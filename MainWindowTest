package fxControllers;

import hibernate.*;
import model.Forum.Forum;
import model.Statuses.CargoType;
import model.Transport.Cargo;
import model.Transport.Checkpoint;
import model.Transport.Destination;
import model.Transport.Vehicle;
import model.Users.Admin;
import model.Users.Driver;
import model.Users.Manager;
import model.Users.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.platform.commons.util.CollectionUtils;

import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;

class MainWindowTest {

    private EntityManagerFactory entityManagerFactory;

    private Admin admin;
    public Driver driver;
    public Manager manager;
    public int Role;

    private UserHib userHib;
    public User user;

    private VehicleHib vehicleHib;
    private Vehicle vehicle;

    private CargoHib cargoHib;
    private Cargo cargo;

    private DestinationHib destinationHib;
    private Destination destination;

    private CheckpointHib checkpointHib;
    private Checkpoint checkpoint;

    private ForumHib forumHib;
    private Forum forum;

    @BeforeEach
    void setUp() {
        entityManagerFactory = Persistence.createEntityManagerFactory("CargoSystem");

        userHib = new UserHib(entityManagerFactory);
        vehicleHib = new VehicleHib(entityManagerFactory);
        cargoHib = new CargoHib(entityManagerFactory);
        destinationHib = new DestinationHib(entityManagerFactory);
        checkpointHib = new CheckpointHib(entityManagerFactory);
        forumHib = new ForumHib(entityManagerFactory);

        // Nustatyti useri ir praeiti komandas Per visas ROLES

        LocalDate HB = LocalDate.parse("2021-12-28", DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        driver = new Driver("UNIT","TEST","UNIT_TEST_LOGIN","UNIT_TEST_PASSWORD", "UNIT_TEST_EMAIL", "8666666666666", "Vilnius", HB, "123456789");
        driver.setId(99999);

        manager = new Manager("UNIT_M_FIRST","UNIT_M_SUR","UNML","UNMP", "UNML@gmail.com", "8674412254", "Vilnius", HB, "Monikue.Monik@cargo.com");

        vehicle = new Vehicle("GGG", "YYY", "ASD", "123", "6.3", Float.parseFloat("3500"), CargoType.BUSSINESS);

        cargo = new Cargo("DUHUGVARDIJA", CargoType.BUSSINESS, 750.0);

        destination = new Destination("Kaunas", "Alytus", manager);

        checkpoint = new Checkpoint("Vilnius", HB, HB, destination);

        forum = new Forum("Belekas", "Apie viska");

    }

    @Test
    void FillAllLists(){
        List<Driver> allDrivers = userHib.getAllDrivers();
        //allDrivers.forEach(u -> driversList.getItems().add(u));

        List<Manager> allManagers = userHib.getAllManagers();
        //allManagers.forEach(m -> managersList.getItems().add(m));

        List<Vehicle> allVehicles = vehicleHib.getAllVehicle();
        //allVehicles.forEach(v -> vehicleList.getItems().add(v));

        List<Destination> allDestinations = destinationHib.getAllDestination();
        //allDestinations.forEach(d -> destinationList.getItems().add(d));

        List<Cargo> allCargo = cargoHib.getAllCargo();
        //allCargo.forEach(c -> cargoList.getItems().add(c));

        List<Checkpoint> allcheckpoints = checkpointHib.getAllCheckpoints();
        //allcheckpoints.forEach(b -> checkpointList.getItems().add(b));

        List<Forum> allForums = forumHib.getAllForum();
        //allForums.forEach(f -> ForumList.getItems().add(f));
    }

    @Test
    void CreateDriverAndDelete(){

        userHib.createUser(driver);
        userHib.deleteUser(driver);
    }

    @Test
    void CreateManagerAndDelete(){
        userHib.createUser(manager);
        userHib.deleteUser(manager);
    }

    @Test // Sukuria viena user
    void CreateUserAndChangeHisCRED(){
        userHib.createUser(driver);
        driver.setSurname("Testuoju");
        userHib.updateUser(driver);

        Driver patikrinimas = (Driver) userHib.getUserByLoginData(driver.getUsername(), driver.getPassword());

        try{
            assertEquals("Testuoju", patikrinimas.getSurname());
        }
        finally {
            userHib.deleteUser(patikrinimas);
        }

    }

    @Test
    void DoLoginCheck(){
        userHib.createUser(driver);
        driver.setSurname("Testuoju");
        userHib.updateUser(driver);
        driver.setId(99999);
        userHib.updateUser(driver);
        Driver patikrinimas = (Driver) userHib.getUserByLoginData(driver.getUsername(), driver.getPassword());
        assertEquals(patikrinimas.getDriversLicenceId(), driver.getDriversLicenceId());
        userHib.deleteUser(patikrinimas);

    }

    @Test
    void setData() {
    }

    @Test
    void createVehicle() {

        vehicleHib.createVehicle(vehicle);
        vehicle.setFuelConsumptionIn100Km((float) 6.20);
        vehicleHib.updateVehicle(vehicle);

        Vehicle patikrinimas = vehicleHib.getVehicleById(vehicle.getId());
        System.out.println(patikrinimas.getId());
        assertEquals( "6.2", patikrinimas.getFuelConsumptionIn100Km());

        vehicleHib.deleteVehicle(patikrinimas);
    }

/*
    @Test
    void createCargo() {
        userHib.createUser(manager);

        cargo.setKroviniomase(555.00);
        cargo.setDestination(destination);
        destination.setCargo(cargo);
        cargoHib.createCargo(cargo);
        cargoHib.updateCargo(cargo, destination);

        Cargo patikrinimas = cargoHib.getCargoById(cargo.getId());
        System.out.println(patikrinimas.getId());
        assertEquals(555.00, patikrinimas.getKroviniomase());

        cargoHib.deleteCargo(patikrinimas);
        Destination fakeD = destinationHib.getDestinationById(destination.getId());
        destinationHib.deleteDestination(fakeD);

        Manager fakedd = (Manager) userHib.getUserById(manager.getId());
        userHib.deleteUser(fakedd);

    }
    */


    @Test
    void createCheckpoint() {
        List<Checkpoint> OldCheckpoints = checkpointHib.getAllCheckpoints();
        userHib.createUser(manager);
        //destinationHib.createDestination(destination);

        checkpoint.setDestination(destination);
        checkpointHib.createCheckpoint(checkpoint);

        List<Checkpoint> NewCheckpoints = checkpointHib.getAllCheckpoints();
        NewCheckpoints.removeAll(OldCheckpoints);

        try {
            for (int i=0; i<NewCheckpoints.size(); i++)
            {
                destination.setId(NewCheckpoints.get(i).getDestination().getId());
                checkpointHib.deleteCheckpoint(NewCheckpoints.get(i));
            }

        }
        catch (NullPointerException e) {fail();}


        Destination fakeD = destinationHib.getDestinationById(destination.getId());
        destinationHib.deleteDestination(fakeD);

        Manager fakedd = (Manager) userHib.getUserById(manager.getId());
        userHib.deleteUser(fakedd);


    }





    @Test
    void statistics() {
    }

    @Test
    void createForum() {
        List<Forum> OldForum = forumHib.getAllForum();
        forumHib.createForum(forum);
        List<Forum> NewForum = forumHib.getAllForum();
        for (int y=0; y<NewForum.size(); y++){
            for (int z=0; z<OldForum.size(); z++){
                if (NewForum.get(y).getId() == OldForum.get(z).getId()){
                    NewForum.remove(y);
                }
            }

        }

        try {
            for (int i=0; i<NewForum.size(); i++){
                forum.setId(NewForum.get(i).getId());
                forum.setDescription("kaka");
                forumHib.updateForum(forum);
                forumHib.deleteForum(forum);
            }

        }
        catch (Exception e){
            fail();
        }
    }

}
