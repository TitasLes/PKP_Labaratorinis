package fxControllers;

import hibernate.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.chart.PieChart;
import javafx.scene.control.*;
import model.Transport.Cargo;
import model.Transport.Destination;
import model.Transport.DestinationInfo;
import model.Users.Driver;
import utils.FxUtils;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;

public class DestinationINFOwindow implements Initializable {
    @FXML
    public TextField DesStart;
    @FXML
    public TextField DesEnd;
    @FXML
    public TextField DesCargo;
    @FXML
    public TextField DesVehicle;
    @FXML
    public TextField DesDriver;
    @FXML
    public TextField DesManager;

    @FXML
    public TextField CWeight;
    @FXML
    public TextField CType;

    @FXML
    public TextField DITripDistance;
    @FXML
    public TextField DIDuration;
    @FXML
    public TextField DIAvgSpeed;
    @FXML
    public TextField DIAvgEmissions;
    @FXML
    public TextField DICargoWorth;
    @FXML
    public TextField DICargoProfit;



    public Button Update;


    private Destination currentDestination;
    private Cargo currentCargo;
    private DestinationInfo currentInfo;



    private EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("CargoSystem");
    private CargoHib cargoHib = new CargoHib(entityManagerFactory);
    private DestinationHib destinationHib = new DestinationHib(entityManagerFactory);
    private UserHib userHib = new UserHib(entityManagerFactory);
    private VehicleHib vehicleHib = new VehicleHib(entityManagerFactory);
    private DestinationINFOHib destinationINFOHib = new DestinationINFOHib(entityManagerFactory);

    //Global list filtered Drivers by id
    private List<Destination> DestinationsByDriver;

    public void setDestination(EntityManagerFactory entityManagerFactory, Destination destination)
    {
        this.currentDestination = destination;
        this.currentCargo = destination.getCargo();
        this.entityManagerFactory = entityManagerFactory;
        //this.currentInfo = (DestinationInfo)currentDestination;
        fillFields();
    }

    public void fillFields() {

        try {
            DesStart.setText(currentDestination.getStartPoint());
            DesEnd.setText(currentDestination.getEndPoint());
            DesCargo.setText(currentDestination.getCargo().toString());
            DesVehicle.setText(currentDestination.getVehicle().toString());
            DesDriver.setText(currentDestination.getDriver().toString());
            DesManager.setText(currentDestination.getManager().toString());
        }
        catch (NullPointerException e) {

            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Destination information is not fully filled in ");
            throw e;
        }
        CWeight.setText(currentCargo.getWeight().toString());
        CType.setText(currentCargo.getCargoType().toString());

        try {
            if (currentDestination instanceof DestinationInfo){
                DITripDistance.setText( ((DestinationInfo)currentDestination).getAtstumas());
                DIDuration.setText( ((DestinationInfo)currentDestination).getKelionesTrukme());
                DIAvgSpeed.setText( String.valueOf (((DestinationInfo)currentDestination).getAvgSpeed()));
                DIAvgEmissions.setText( String.valueOf (((DestinationInfo)currentDestination).getRealiosKuroSanaudos()));
                DICargoWorth.setText( String.valueOf (((DestinationInfo)currentDestination).getKrovinioVerte()));
                DICargoProfit.setText( String.valueOf (((DestinationInfo)currentDestination).getKrovinioPajamos()));
            }


            //DIAvgEmissions.setText(currentDestination.);
        }
        catch (NullPointerException e){
            // Do nothing maybe values are not set
        }

    }

    public void UpdateINFO() {
        DestinationInfo destinationInfo = new DestinationInfo(currentDestination.getStartPoint(), currentDestination.getEndPoint(), currentDestination.getManager());
        destinationInfo.setId(currentDestination.getId());
        destinationInfo.setCargo(currentDestination.getCargo());
        destinationInfo.setDriver(currentDestination.getDriver());
        destinationInfo.setVehicle(currentDestination.getVehicle());


        try {
            destinationInfo.setAtstumas( Double.parseDouble( DITripDistance.getText()));
        }
        catch (NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }
        try {
            destinationInfo.setKelionesTrukme( Double.parseDouble(DIDuration.getText()));
        }
        catch (NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }
        try {
            destinationInfo.setAvgSpeed( Double.parseDouble(DIAvgSpeed.getText()));
        }
        catch (NumberFormatException | NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }
        try {
            destinationInfo.setRealiosKuroSanaudos( Double.parseDouble(DIAvgEmissions.getText()));
        }
        catch (NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }
        try {
            destinationInfo.setKrovinioVerte( Double.parseDouble(DICargoWorth.getText()));
        }
        catch (NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }
        try {
            destinationInfo.setKrovinioPajamos( Double.parseDouble(DICargoProfit.getText()));
        }
        catch (NumberFormatException | NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Some fields are empty");
            throw e;
        }

        try{
            destinationINFOHib.updateDestinationINFO(destinationInfo);
        }
        catch (NumberFormatException | NullPointerException e){
            FxUtils.alterMessage(Alert.AlertType.WARNING, "Warning", "Destination info warning", "Destination information is not fully filled in ");
            throw e;
        }



    }



    @Override
    public void initialize(URL location, ResourceBundle resources) {
        destinationINFOHib.updateDTYPES();



    }

    public void ReCAL(ActionEvent actionEvent) {
        double CarEmmisions = Double.parseDouble(currentDestination.getVehicle().getFuelConsumptionIn100Km());
        double Speed = Double.parseDouble(DIAvgSpeed.getText());
        double AdditionalEmmisions;
        if (Speed > 90){
            double a;
            a = Speed - 90;
            AdditionalEmmisions = ((9*Math.pow(a, 3) + 95*Math.pow(a, 2))/25000)+0.5;
        }
        else {
            AdditionalEmmisions = 0.0;
        }
        double CarCargo = currentCargo.getKroviniomase();
        double Tonazas = (CarCargo/10000)*3;

        double RealAVGEmmisions = CarEmmisions + AdditionalEmmisions + Tonazas;
        double RealAVGEmmisionsforCALL = RealAVGEmmisions;
        RealAVGEmmisions = RealAVGEmmisions*100;
        RealAVGEmmisions = Math.round(RealAVGEmmisions);
        RealAVGEmmisions = RealAVGEmmisions/100;
        ((DestinationInfo)currentDestination).setRealiosKuroSanaudos(RealAVGEmmisions);
        DIAvgEmissions.setText( String.valueOf (((DestinationInfo)currentDestination).getRealiosKuroSanaudos()));

        double cargoWorth = Double.parseDouble(DICargoWorth.getText());
        double durationINhours = Double.parseDouble(DIDuration.getText()) / 60;
        double salaryHourly = 25;

        double distance = Double.parseDouble(DITripDistance.getText());
        double salary = salaryHourly * durationINhours;
        double Litrazas = (RealAVGEmmisionsforCALL * distance) / 100;
        double petrolKaina = 1.65;
        double petrolCost = petrolKaina * Litrazas;

        double Minusprofit = salary + petrolCost;
        double profit = cargoWorth - Minusprofit;

        profit = profit *100;
        profit = Math.round(profit);
        profit = profit / 100;

        ((DestinationInfo)currentDestination).setKrovinioPajamos(profit);
        DICargoProfit.setText(String.valueOf(profit));

    }
}



