 @Test
    void setKuroSanaudos() {
        // Create necessary objects and persist them
        userHib.createUser(manager);
        userHib.createUser(driver);
        driver.setSurname("Testuoju");
        userHib.updateUser(driver);
        Driver patikrinimas = (Driver) userHib.getUserByLoginData(driver.getUsername(), driver.getPassword());
        destination.setManager(manager);
        destinationHib.createDestination(destination);
        destinationINFOHib.updateDTYPES();
        currentDestination = (DestinationInfo) destinationHib.getAllDestination().get(0);

        // Test setting valid value
        try {
            ((DestinationInfo) currentDestination).setRealiosKuroSanaudos(10);
            assertEquals(10, ((DestinationInfo) currentDestination).getRealiosKuroSanaudos());
        } catch (IllegalArgumentException e) {
            fail("IllegalArgumentException thrown when setting valid value");
        } catch (Exception e) {
            fail("Unexpected exception thrown when setting valid value");
        }

        // Test setting negative value
        try {
            ((DestinationInfo) currentDestination).setRealiosKuroSanaudos(-10);
            fail("IllegalArgumentException should be thrown when setting negative value");
        } catch (IllegalArgumentException e) {
            // Exception expected
        } catch (Exception e) {
            fail("Unexpected exception thrown when setting negative value");
        }

        // Cleanup
        destinationHib.deleteDestination(currentDestination);
        userHib.deleteUser(manager);
        userHib.deleteUser(driver);
        userHib.deleteUser(patikrinimas);
    }

